#!/bin/bash


# Declare function to sync
# copy schema xml
copy()
{
	path="$1"
	declare -a schemas=("managed-schema.xml" "schema.xml")
	for schema in "${schemas[@]}"
	do
		find -name "$schema" \( -not -path "*/configsets/*" -not -path "*/schema_backup/*" -not -path "*/schema_files/*" \) |\
		sed "s/.*\/server\/solr\/\(.*\)\/.*/\1/" | \
		xargs -I {} mkdir -p "$path/{}" &&

		# Search all schema.xml paths and alter to new directory paths.
		dest=$(find -name "$schema" \( -not -path "*/configsets/*" -not -path "*/schema_backup/*" -not -path "*/schema_files/*" \) |\
		sed "s/.*\/server\/solr\/\(.*\)/\1/" | \
		xargs -I {} echo "$path/{}")  &&

		# Search all original schema.xml paths and save paths
		origin=$(find -name "$schema" \( -not -path "*/configsets/*" -not -path "*/schema_backup/*" -not -path "*/schema_files/*" \) ) &&
		
		# Copy all schema.xml into respective directories
		# paste can only read file structures
		# <() create a file like structure
		# printf '%s\n' treats variable as string and seperates via internal IFS=" "
		# prints new line because $var is not in "$var", if it would be, the \n would happen after the $var
		paste <(printf '%s\n' $origin) <(printf '%s\n' $dest) | xargs -n2 cp
	done
}

copy_git()
{	declare -a schemas=("managed-schema.xml" "schema.xml")
	for schema in "${schemas[@]}"
	do
		find -name "$schema" \( -not -path "*/schema_files/*" -not -path "*/schema_backup/*" \) |\
		head -n 1 |\
		sed "s/\(.*\/server\/solr\).*/\1/"|\
		xargs -I {} cp -r schema_files/* {}
	done
}

git_pull()
{
	echo "▓Github » Pull Github schema▓"
	echo "↓"
	if ! git pull origin main; then
		echo ""
		echo "▓Github Error▓"
		echo "↓"
		echo "Git Pull failed. Consider to log in with your Github Account."
		exit 1
	fi
	echo ""
}

git_push()
{
	echo "▓Github » Push local schema commit▓"
	echo "↓"
	git add schema_files/
	git commit -m "updated schema $(date +"%D_%H-%M")"
	if ! git push -u origin main; then
		echo ""
		echo "▓Github Error▓"
		echo "↓"
		echo "Git Push failed. Consider to log in with your Github Account."
		exit 1
	fi
	echo ""
}

# Init Variables
man="
syn_schema [-option1] [-option2] [...]

Available parameter (You can choose more then one.):
-togit 		» (Overwrites) Copy own schema to group schema.
-tolocal 	» (Overwrites) Copy group schema to own schema.
-syn		» Get schema from Github or Upload schema to Github. 
			  ATTENTION! » works only in combination with -togit / -tolocal
			  Example: syn_schema -togit -syn
-bak 		» (Overwrites) Copy local schema to Backup folder.
"

start="

"


# Raise silent exception with manual when no command switches are inserted
if [[ $# -eq 0 ]]; then
	printf "$man"
	exit 9
fi

# Raise exception when no local managed-schema.xml is found or a solr installation is missing.
if [[ -z $(find -name "managed-schema.xml") ]]; then
	echo "ERROR: No schema xml found"
	echo ""
	echo "1. Check if solr is installed."
	echo "2. Check if collection has been created."
	exit 9
fi

# Iterate through command switches
while [[ -n $1 ]]
do
	case "$1" in 
		"-togit")
					togit=1
					shift
					;;

		"-tolocal")
					tolocal=1
					shift
					;;

		"-syn")
					syn=1
					shift
					;;
		"-bak") 
					bak=1
					shift
					;;
		*)
					echo "$1 not recognized, will not be executed."
					shift
					;;
		esac
done

# ###################################################
# # Safety Backup when conflicting command switches #
# ###################################################
# Backup when -togit -tolocal -syn are all chosen
if [[ $togit -eq 1 && $tolocal -eq 1 ]]; then
	read -p "
	You chose full synching with -togit -tolocal. 
	Do you want to backup your local schema?
	!!Attention!!!
	Your current backup will be replaced.
	Answer with (y/n):" q_flag
	if [[ $q_flag = "y" ]]; then
		echo "▓Copying▓"
		echo "↓"
		echo "Start backing up schemas into schema_backup/"
		copy schema_backup
		echo ""
	else
		echo ""
		echo "» No backup initiated."
		echo ""
	fi
fi

# ################################
# # Local Schema to Goup Schema  #
# ################################
# Pull Github schema before pushing 
if [[ $togit -eq 1 && $syn -eq 1 ]]; then
	git_pull
fi

# Copy local schema to group schema
if [[ $togit -eq 1 ]]; then
	# Search all available schemas and create directories for each in GitHub directories.
	echo "▓Copying▓"
	echo "↓"
	echo "Start copying own schemas to schema_files/ ..."
	copy schema_files
	echo ""		
fi

# Create Commit & Push to Github
if [[ $togit -eq 1 && $syn -eq 1 ]]; then
	git_push
fi

# ################################
# # Group Schema to Local Schema #
# ################################
 
# Pull Github schema
if [[ $tolocal -eq 1 && $syn -eq 1 ]]; then
	git_pull
fi

# Copy group schema to own schema
if [[ $tolocal -eq 1 ]]; then
	# Search local solr directory & Copy files from Github solr to local solr.
	echo "▓Copying▓"
	echo "↓"
	echo "Start copying schemas to own schemas ..."
	copy_git
	echo ""
fi

# ################################
# #          Backup              #
# ################################
# Saving Files from local solr to backup.
if [[ $bak -eq 1 ]]; then
	# Search all available schemas and create directories for each in GitHub directories.
	echo "▓Copying▓"
	echo "↓"
	echo "Start backing up schemas into schema_backup/"
	copy schema_backup
	echo ""
fi

echo "» Finished synchronizing schemas «"

exit 0