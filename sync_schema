#!/bin/bash


# Declare function to sync
# copy schema xml
copy()
{
	path="$1"
	declare -a schemas=("managed-schema.xml" "schema.xml" "solrconfig.xml" "stopwords_en.txt")
	for schema in "${schemas[@]}"
	do
		find -name "$schema" \( -not -path "*/configsets/*" -not -path "*/schema_backup/*" -not -path "*/schema_files/*" \) |\
		sed "s/.*\/server\/solr\/\(.*\)\/.*/\1/" | \
		xargs -I {} mkdir -p "$path/{}" &&

		# Search all schema.xml paths and alter to new directory paths.
		dest=$(find -name "$schema" \( -not -path "*/configsets/*" -not -path "*/schema_backup/*" -not -path "*/schema_files/*" \) |\
		sed "s/.*\/server\/solr\/\(.*\)/\1/" | \
		xargs -I {} echo "$path/{}")  &&

		# Search all original schema.xml paths and save paths
		origin=$(find -name "$schema" \( -not -path "*/configsets/*" -not -path "*/schema_backup/*" -not -path "*/schema_files/*" \) ) &&
		
		# Copy all schema.xml into respective directories
		# paste can only read file structures
		# <() create a file like structure
		# printf '%s\n' treats variable as string and seperates via internal IFS=" "
		# prints new line because $var is not in "$var", if it would be, the \n would happen after the $var
		paste <(printf '%s\n' $origin) <(printf '%s\n' $dest) | xargs -n2 cp
	done
}

copy_git()
{	declare -a schemas=("managed-schema.xml" "schema.xml" "solrconfig.xml" "stopwords_en.txt")
	for schema in "${schemas[@]}"
	do
		find -name "$schema" \( -not -path "*/schema_files/*" -not -path "*/schema_backup/*" \) |\
		head -n 1 |\
		sed "s/\(.*\/server\/solr\).*/\1/"|\
		xargs -I {} cp -r schema_files/* {}
	done
}

git_pull()
{
	echo "▓Github » Pull Github schema▓"
	echo "↓"
	if ! git pull origin main; then
		echo ""
		echo "▓Github Error▓"
		echo "↓"
		echo "Git Pull failed. Consider to log in with your Github Account."
		exit 1
	fi
	echo ""
}

git_push()
{
	echo "▓Github » Push local schema commit▓"
	echo "↓"
	git add schema_files/
	git commit -m "updated schema $(date +"%D_%H-%M")"
	if ! git push -u origin main; then
		echo ""
		echo "▓Github Error▓"
		echo "↓"
		echo "Git Push failed. Consider to log in with your Github Account."
		exit 1
	fi
	echo ""
}

solr_helper()
{	
	solr_binary=$1
 	if [[ $2 = "start" ]]; then
	 	echo "▓Restarting Solr▓"
	    echo "↓"
	    # Safety start so no overlapping occurs during runtime
	    ./$solr_binary start && sleep 5 # Give it a small initial delay
	    solr_pid=$! # Capture the PID
	    wait $solr_pid # Wait for Solr to start
	fi

    if [[ $2 = "stop" ]]; then
    	echo "▓Stopping Solr▓"
	    echo "↓"
	    # Safety start so no overlapping occurs during runtime
	    ./$solr_binary stop --all && sleep 5 # Give it a small initial delay
	    solr_pid=$! # Capture the PID
	    wait $solr_pid # Wait for Solr to start    	
	fi
}

# Init Variables
man="
syn_schema [-option1] [-option2] [...]

Available parameter (You can choose more then one.):
-togit 		» (Overwrites) Copy own schema to group schema.
-tolocal 	» (Overwrites) Copy group schema to own schema.
-syn		» Get schema from Github or Upload schema to Github. 
			  ATTENTION! » works only in combination with -togit / -tolocal
			  Example: syn_schema -togit -syn
-bak 		» (Overwrites) Copy local schema to Backup folder.
-createcore	» Creates new Cores and indexes them with them metadata.csv.
			  !!!ATTENTION!!!
			  metadata.csv must be in following directory:
			  data/index/metadata.csv
"

start="

"


# Raise silent exception with manual when no command switches are inserted
if [[ $# -eq 0 ]]; then
	printf "$man"
	exit 9
fi

# Raise exception when no local managed-schema.xml is found or a solr installation is missing.
if [[ -z $(find -name "*schema.xml" \( -not -path "*/schema_backup/*" -not -path "*/schema_files/*" \) ) ]]; then
	echo "ERROR: No schema xml found"
	echo ""
	echo "1. Check if solr is installed."
	echo "2. Check if collection has been created."
	exit 9
fi


# Set create to 0 for savety, so no accident copy with -tolocal happens before
create=0

# Iterate through command switches
while [[ -n $1 ]]
do
	case "$1" in 
		"-togit")
					togit=1
					shift
					;;

		"-tolocal")
					tolocal=1
					shift
					;;

		"-syn")
					syn=1
					shift
					;;
		"-bak") 
					bak=1
					shift
					;;
		"-createcore") 
					create=1
					shift
					;;
		*)
					echo "$1 not recognized, will not be executed."
					shift
					;;
		esac
done

# ###################################################
# # Safety Backup when conflicting command switches #
# ###################################################
# Backup when -togit -tolocal -syn are all chosen
if [[ $togit -eq 1 && $tolocal -eq 1 ]]; then
	read -p "
	You chose full synching with -togit -tolocal. 
	Do you want to backup your local schema?
	!!Attention!!!
	Your current backup will be replaced.
	Answer with (y/n):" q_flag
	if [[ $q_flag = "y" ]]; then
		echo "▓Copying▓"
		echo "↓"
		echo "Start backing up schemas into schema_backup/"
		copy schema_backup
		echo ""
	else
		echo ""
		echo "» No backup initiated."
		echo ""
	fi
fi

# ################################
# # Local Schema to Goup Schema  #
# ################################
# Pull Github schema before pushing 
if [[ $togit -eq 1 && $syn -eq 1 ]]; then
	git_pull
fi

# Copy local schema to group schema
if [[ $togit -eq 1 ]]; then
	# Search all available schemas and create directories for each in GitHub directories.
	echo "▓Copying▓"
	echo "↓"
	echo "Start copying own schemas to schema_files/ ..."
	copy schema_files
	echo ""		
fi

# Create Commit & Push to Github
if [[ $togit -eq 1 && $syn -eq 1 ]]; then
	git_push
fi

# ################################
# # Group Schema to Local Schema #
# ################################
 
# Pull Github schema
if [[ $tolocal -eq 1 && $syn -eq 1 ]]; then
	git_pull
fi

# Copy group schema to own schema
if [[ $tolocal -eq 1 && $create -ne 1 ]]; then
	# Search local solr directory & Copy files from Github solr to local solr.
	echo "▓Copying▓"
	echo "↓"
	echo "Start copying schemas to own schemas ..."
	solr_helper stop
	copy_git
	echo ""
elif [[ $tolocal -eq 1 && $create -eq 1 ]]; then
	echo "▓Aborted▓"
	echo "Creating Cores is choosen."
	echo "-tolocal and -createcore can't be choosen the at the same time."
fi

# ################################
# #          Backup              #
# ################################
# Saving Files from local solr to backup.
if [[ $bak -eq 1 ]]; then
	# Search all available schemas and create directories for each in GitHub directories.
	echo "▓Copying▓"
	echo "↓"
	echo "Start backing up schemas into schema_backup/"
	copy schema_backup
	echo ""
fi

# ################################
# #        Create Cores          #
# ################################
# Pull Github schema
if [[ $create -eq 1 && $syn -eq 1 ]]; then
	git_pull
fi

# Creating non existing cores and saving schemas as well as
if [[ $create -eq 1 ]]; then
	# Finding available cores from Github.
	cores=$(find -name "*schema.xml" \( -not -path "*/server/solr/*" -not -path "*/schema_backup/*" \) | sed "s/.*\/schema_files\/\(.*\)\/conf.*/\1/" | sort | uniq )
	# Settin Path to check if cores exist.
	solr_path=$(find -name "*schema.xml" \( -not -path "*/schema_backup/*" -not -path "*/schema_files/*" \) | sed "s/\.\/\(.*\/server\/solr\).*\/conf\/.*/\1/" | head -n 1)

	echo "$cores"
	echo "$solr_path"
	# Set solr base_dir & Create symbolic link for adressing solr
	# Check if script is executed in windows
	echo "▓Detecting System▓"
	echo "↓"
	solr_base_dir=$(find -name "*schema.xml" \( -not -path "*/schema_backup/*" -not -path "*/schema_files/*" \) | sed "s/\.\/\(.*\)\/server\/solr\/.*/\1/" | head -n 1 )
	if [[ -d "/c/Windows" ]]; then
		echo "OS: Windows"		
		solr_binary="$solr_base_dir/bin/solr.cmd"
	else
		echo "OS: Linux"
		solr_binary="$solr_base_dir/bin/solr"
	fi
	echo "Solr Directory: $solr_base_dir"
	echo "Binary Path: $solr_binary"
	echo ""
	# Set metadata.csv path
	metadata="data/index/metadata.csv"

	# Running through each found core to see if it can be created.
	for core in $cores; do
	    core_path="$solr_path/$core"
	    # Check if core exists in the local solr installation
	    if [[ -d $core_path ]]; then
	        echo "▓Aborted Creating: $core▓"
	        echo "↓"
	        echo "$core exists. Please change manually."
	        echo ""
	    else
	    	# Creates core if it doesn't exist.
			# Safety stop and start so no overlapping occurs during runtime
			solr_helper $solr_binary stop &&
			solr_helper $solr_binary start && 
			echo "▓Creating Core: $core▓"
			echo "↓"
	        ./$solr_binary create -c "$core";
	        # Needs to restart the solr installation to apply changes made manually.
			solr_helper $solr_binary stop &&
	        # Search local solr directory & Copy files from Github solr to local solr.
			echo "▓Copying▓"
			echo "↓"
			echo "Start copying schema to new core ..."
			echo "$core_path"
			echo "cp schema_files/$core/conf/* $core_path/conf/."
			cp "schema_files/$core/conf/"* "$core_path/conf/."
			echo ""
			# Start Solr again for indexing
			solr_helper $solr_binary start && 
			echo ""
			echo "▓Testing if applied Search Engine successfully changed▓"
			echo "↓"
			# See visually if schema is applied
			echo "$(curl "http://localhost:8983/solr/$core/schema/similarity")";
			echo ""
			if [[ -f $metadata ]]; then
				echo "▓Indexing Solr: $core▓"
				echo "↓"
		        ./$solr_binary post -c $core $metadata --params "&skip=arxiv_id,publish_time,pubmed_id&header=true";
        	else 
    			echo "▓!!!Aborted Indexing!!!▓"
    			echo "metadata.csv must exist in following directory!"
    			echo "data/index/metadata.csv"
	    	fi
	        echo ""
	        echo "▓Finished creating Core: $core▓"
	        echo ""
	    fi
	done

	solr_helper $solr_binary stop
fi

echo "» Finished synchronizing schemas «"

exit 0
